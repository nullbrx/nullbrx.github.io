<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Nullbrx Blog]]></title><description><![CDATA[Thoughts, code and tacos...]]></description><link>https://nullbrx.github.io</link><generator>RSS for Node</generator><lastBuildDate>Sun, 05 Aug 2018 03:06:32 GMT</lastBuildDate><item><title><![CDATA[Thoughts on Terraform]]></title><description><![CDATA[Intro Terraform  is a popular infrastructure-as-code tool used to provision Cloud environments. While tools like Ansible and Puppet provide…]]></description><link>https://nullbrx.github.io/terraform-thoughts/</link><guid isPermaLink="false">https://nullbrx.github.io/terraform-thoughts/</guid><pubDate>Sat, 04 Aug 2018 23:46:37 GMT</pubDate><content:encoded>&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.terraform.io&quot;&gt;Terraform&lt;/a&gt; is a popular infrastructure-as-code tool used to provision Cloud environments. While tools like Ansible and Puppet provide host-configuration, Terraform drastically reduces toil associated with manually provisoining machines and settings with providers, like AWS, GCP, GitLab,and &lt;a href=&quot;https://registry.terraform.io/&quot;&gt;many others&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;For me, getting started with Terraform was somewhat difficult, because I didn’t have extensive knowledge with code-based config management tools , such as Puppet or Ansible. Although Terraform &lt;a href=&quot;https://logz.io/blog/terraform-ansible-puppet/&quot;&gt;does not replace&lt;/a&gt;these tools, some core concepts proved to be universal, especially with modular code.&lt;/p&gt;
&lt;p&gt;The true power of Terraform comes from writing modularized code. I highly suggest watching &lt;a href=&quot;https://www.youtube.com/watch?v=LVgP63BkhKQQ&quot;&gt;“How to Build Reusable, Composable, Battle-Tested Terraform Modules”&lt;/a&gt; talk from HashiConf to get a better understanding.&lt;/p&gt;
&lt;h2&gt;The Joys of Automation&lt;/h2&gt;
&lt;p&gt;“Automation” occasionally &lt;a href=&quot;https://xkcd.com/1319/&quot;&gt;turns into a buzzword&lt;/a&gt;, because it’s not &lt;em&gt;always&lt;/em&gt; a quick turnaround to solutions. I spent a week doing basic infrastructure (creating instances, standardizing environment naming schemes), and I still didn’t have anything useful. However, the real investment showed when we wanted to re-create an instance of OS of every machine in the fleet, or renaming computers (maybe you want to call your computers chipotle.prod instead of qdoba.prod, I don’t know.) It may be slow at first when creating modules initially, but it pays off when you need to do perform fleet-wide changes, or repetitive tasks.&lt;/p&gt;
&lt;p&gt;I’m excited to see what modules an features Terraform brings in upcoming versions.&lt;/p&gt;
&lt;h3&gt;Sidenotes&lt;/h3&gt;
&lt;p&gt;I would recommend reading &lt;a href=&quot;https://blog.gruntwork.io/@brikis98&quot;&gt;everything&lt;/a&gt; from here if you’re getting started.&lt;/p&gt;</content:encoded></item></channel></rss>